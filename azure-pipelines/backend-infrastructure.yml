# ========================
# âœ… PIPELINE: Apply Backend Infrastructure with Terraform
# ========================
# ðŸŽ¯ Trigger pipeline on changes to main branch and specific files
name: backend-infrastructure

trigger: none
# pr: none 

resources:
  pipelines:
    - pipeline: frontend-infrastructure
      source: frontendInfra 
      trigger: none
#         branches:
#           include:
#             - main  
# trigger: 
#   branches:
#     include:
#       - main
#   paths:
#    include:
#      - 'infrastructure/backend**'
#      - 'azure-pipelines/backend-infrastructure.yml'
pool:
  name: 'Default'

variables:
  # Variable group containing tfstate vars and backendServiceArm.
  - group: terraform-variables 
  
  - name: tfstateKey
    value: $(tfstateKeyBackend)
    
  - name: terraformWorkingDir
    value: '$(System.DefaultWorkingDirectory)/infrastructure/backend'

  - name: backendWorkingDir
    value: '$(System.DefaultWorkingDirectory)/backend-app'
 
  - name: azureServiceConnection
    value: '$(backendServiceArm)'

stages:
  - stage: DeployBackendInfra
    displayName: 'Deploy Backend Infrastructure'
    jobs:
      - job: TerraformDeploy
        displayName: 'Terraform Plan & Apply'
        steps:
          - checkout: self

          # Moved to troubleshooting templates - Clean up any local state files
          
          # Azure CLI Login using service connection
          - task: AzureCLI@2
            displayName: 'Azure CLI Login'
            inputs:
              azureSubscription: '$(backendServiceArm)'
              scriptType: 'ps'
              scriptLocation: 'inlineScript'
              inlineScript: |
              
                # to avoid showing account details 
                Write-Host "Azure CLI authenticated as: $(az account show --query user.name -o tsv)"
 
          # Moved to troubleshooting templates - Verify tf backend config and clean local state files
          # Moved to troubleshooting templates - Verify backend storage account and container existence

          # Terraform Init
          - task: TerraformTaskV4@4
            displayName: 'ðŸš€ Terraform Init with Remote Backend'
            inputs:
              provider: 'azurerm'
              command: 'init'
              backendServiceArm: '$(backendServiceArm)'
              backendAzureRmResourceGroupName: '$(tfstateResourceGroup)'
              backendAzureRmStorageAccountName: '$(tfstateStorageAccount)'
              backendAzureRmContainerName: '$(tfstateContainer)'
              backendAzureRmKey: '$(tfstateKey)'
              workingDirectory: '$(terraformWorkingDir)'
              commandOptions: '-reconfigure'

          # Verify Terraform initialisation
          - task: PowerShell@2
            displayName: 'âœ… Verify Terraform Initialisation'
            inputs:
              targetType: 'inline'
              script: |
                Write-Host "=== VERIFYING TERRAFORM INITIALISATION ==="
                Write-Host "Terraform working directory: $env:terraformWorkingDir"
                Write-Host "Contents of $env:terraformWorkingDir:"
                Get-ChildItem -Path $env:terraformWorkingDir -Force | Format-Table Name, Mode, LastWriteTime

                $terraformDir = Join-Path $env:terraformWorkingDir '.terraform'
                if (Test-Path $terraformDir) {
                  Write-Host ".terraform directory created successfully"
                  Write-Host "Contents of .terraform directory:"
                  Get-ChildItem -Path $terraformDir -Force | Format-Table Name, Mode

                  $localState = Join-Path $env:terraformWorkingDir 'terraform.tfstate'
                  if (Test-Path $localState) {
                    Write-Error "Local terraform.tfstate found - backend not configured correctly!"
                    exit 1
                  }
                  else {
                    Write-Host "No local state file - using remote backend"
                  }

                  Push-Location $env:terraformWorkingDir
                  Write-Host "Terraform version:"
                  terraform version

                  Write-Host "Current workspace:"
                  terraform workspace show
                  Pop-Location
                }
                else {
                  Write-Error ".terraform directory not found! Terraform init may have failed."
                  exit 1
                }
              workingDirectory: '$(System.DefaultWorkingDirectory)'

          - task: PowerShell@2
            displayName: 'Debug Terraform Connectivity'         
            condition: failed() 

            timeoutInMinutes: 2
            inputs:
              targetType: 'inline'
              script: |
                cd "$(terraformWorkingDir)"
                
                Write-Host "Testing Terraform with timeout..." -ForegroundColor Yellow
                
                # Create a simple timeout mechanism
                $job = Start-Job -ScriptBlock {
                  param($workDir, $terraformPath)
                  Set-Location $workDir
                  & $terraformPath version
                  & $terraformPath init -backend=false
                } -ArgumentList "$(terraformWorkingDir)", "C:\ProgramData\chocolatey\bin\terraform.exe"
                
                # Wait for 30 seconds max
                $result = Wait-Job $job -Timeout 30
                
                if ($result) {
                  $output = Receive-Job $job
                  Write-Host "Terraform responded:" -ForegroundColor Green
                  Write-Host $output
                } else {
                  Write-Host "Terraform command timed out after 30 seconds" -ForegroundColor Red
                  Stop-Job $job -Force
                  Remove-Job $job -Force
                  
                  # Check if terraform process is stuck
                  $tfProcesses = Get-Process -Name "terraform" -ErrorAction SilentlyContinue
                  if ($tfProcesses) {
                    Write-Host "Found stuck terraform processes:" -ForegroundColor Yellow
                    $tfProcesses | Format-Table Id, StartTime, CPU
                    Write-Host "Killing stuck processes..." -ForegroundColor Yellow
                    $tfProcesses | Stop-Process -Force
                  }
                }

          - task: AzureCLI@2
            displayName: 'ðŸ”“ Force Unlock Terraform Blob Lease if Stuck'

            inputs:
              azureSubscription: '$(backendServiceArm)'
              scriptType: 'ps'
              scriptLocation: 'inlineScript'
              inlineScript: |
                Write-Host "Checking lease on state blob..." -ForegroundColor Yellow

                $blob = az storage blob show `
                  --account-name "$(tfstateStorageAccount)" `
                  --container-name "$(tfstateContainer)" `
                  --name "$(tfstateKey)" `
                  --auth-mode login `
                  --output json | ConvertFrom-Json

                $leaseState = $blob.properties.lease.state
                $leaseStatus = $blob.properties.lease.status

                Write-Host "Lease State: $leaseState"
                Write-Host "Lease Status: $leaseStatus"

                if ($leaseStatus -eq "locked" -and $leaseState -eq "leased") {
                  Write-Host "Locked blob detected - attempting force break..." -ForegroundColor Yellow

                  $leaseBreak = az storage blob lease break `
                    --blob-name "$(tfstateKey)" `
                    --container-name "$(tfstateContainer)" `
                    --account-name "$(tfstateStorageAccount)" `
                    --auth-mode login `
                    --output none

                  Write-Host "Lease successfully broken - state is now unlocked" -ForegroundColor Green
                } else {
                  Write-Host "No active lock detected - continuing" -ForegroundColor Green
                }

          # Terraform Plan
          - task: TerraformTaskV4@4
            displayName: 'ðŸ“‹ Terraform Plan'
            inputs:
              provider: 'azurerm'
              command: 'plan'
              workingDirectory: '$(terraformWorkingDir)'
              environmentServiceNameAzureRM: '$(backendServiceArm)'
              commandOptions: '-detailed-exitcode'

# ========================
# ðŸ”¸ STAGE: Terraform Apply
# ========================

  - stage: ApplyBackendInfra
    displayName: 'Apply Backend Infrastructure'
    jobs:
      - job: TerraformApply
        displayName: 'Terraform Apply'
        pool:
          name: 'Default'
        steps: 
        - checkout: self

        # Terraform Init
        - task: TerraformTaskV4@4
          displayName: 'ðŸš€ Terraform Init with Remote Backend'
          inputs:
            provider: 'azurerm'
            command: 'init'
            backendServiceArm: '$(backendServiceArm)'
            backendAzureRmResourceGroupName: '$(tfstateResourceGroup)'
            backendAzureRmStorageAccountName: '$(tfstateStorageAccount)'
            backendAzureRmContainerName: '$(tfstateContainer)'
            backendAzureRmKey: '$(tfstateKey)'
            workingDirectory: '$(terraformWorkingDir)'
            commandOptions: '-reconfigure'

        # ðŸš€ Apply the planned Terraform changes
        - task: TerraformTaskV4@4
          displayName: 'ðŸš€ Terraform Apply'
          inputs:
            provider: 'azurerm'
            command: 'apply'
            environmentServiceNameAzureRM: '$(backendServiceArm)'
            workingDirectory: '$(terraformWorkingDir)'
            commandOptions: '-auto-approve'

        # âœ… Verify remote state was created
        - task: AzureCLI@2
          displayName: 'âœ… Verify Remote State File Created'
          inputs:
            azureSubscription: '$(backendServiceArm)'
            scriptType: 'ps'
            scriptLocation: inlineScript
            inlineScript: |
              Write-Host "=== VERIFYING REMOTE STATE FILE ==="
              
              # Check if state file exists in blob storage
              $stateExists = az storage blob exists `
                  --account-name $(tfstateStorageAccount) `
                  --container-name $(tfstateContainer) `
                  --name $(tfstateKey) `
                  --auth-mode login `
                  --query "exists" -o tsv
              
              if ($stateExists -eq "true") {
                  Write-Host "Remote state file '$(tfstateKey)' successfully created!"
                  
                  # Get state file details
                  $blobDetails = az storage blob show `
                      --account-name $(tfstateStorageAccount) `
                      --container-name $(tfstateContainer) `
                      --name $(tfstateKey) `
                      --auth-mode login `
                      --query "{size:properties.contentLength, lastModified:properties.lastModified}" -o json | ConvertFrom-Json
                  
                  Write-Host "State file details:"
                  Write-Host "   Size: $($blobDetails.size) bytes"
                  Write-Host "   Last Modified: $($blobDetails.lastModified)"
              } else {
                  Write-Error "Remote state file was not created!"
                  exit 1
              }
              
              # Verify Terraform can read the state
              Write-Host ""
              Write-Host "Verifying Terraform can read remote state:"
              cd $(terraformWorkingDir)
              terraform state list
              
              $stateItems = terraform state list
              if ($stateItems) {
                  Write-Host "Terraform successfully connected to remote state"
                  Write-Host "Resources in state:"
                  $stateItems | ForEach-Object { Write-Host "   - $_" }
              } else {
                  Write-Warning "No resources found in state (this is OK for first run)"
              }

        # ðŸ§¾ Extract outputs and create summary
        - task: PowerShell@2
          displayName: 'ðŸ“Š Create Deployment Summary'
          inputs:
            targetType: 'inline'
            script: |
              Write-Host "=== DEPLOYMENT SUMMARY ==="
              
              # Create summary file
              $summary = @"
              # Backend Infrastructure Deployment Summary
              
              **Deployment Status**: Success
              **Date**: $(Get-Date -Format "yyyy-MM-dd HH:mm:ss")
              
              ## Remote State Configuration
              - **Storage Account**: $(tfstateStorageAccount)
              - **Container**: $(tfstateContainer)
              - **State File**: $(tfstateKey)
              
              ## Infrastructure Outputs
              "@
              
              $summary | Out-File -FilePath "$(System.DefaultWorkingDirectory)\summary.md" -Encoding utf8
              
              # Get Terraform outputs
              cd $(terraformWorkingDir)
              $outputs = terraform output -json | ConvertFrom-Json

        # Clean up
        - task: PowerShell@2
          displayName: 'ðŸ§¹ Clean Up Local Temp Files'
          inputs:
            targetType: 'inline'
            script: |
              Remove-Item -Path "$env:TEMP\*" -Recurse -Force -ErrorAction SilentlyContinue
              Remove-Item -Path "C:\Windows\Temp\*" -Recurse -Force -ErrorAction SilentlyContinue
